            cur_param = flatten_param.reshape(self.param[i].shape)
            cur_param_W = cur_param[1:,]
            cur_param_b = cur_param[0,]  
            
            
            
            
            if(i == 0):
                self.hiddenlayers.append(HiddenLayer(self.input, self.activation))
                self.hiddenlayers[i].setup(cur_param_W,cur_param_b)
            elif(i == len(param)-1):
                self.outputlayer = OutputLayer(self.hiddenlayers[-1].output, self.output, self.activation)
                self.outputlayer.setup(cur_param_W,cur_param_b)
            else:
                self.hiddenlayers.append(HiddenLayer(self.hiddenlayers[i-1].output, self.activation))
                self.hiddenlayers[i].setup(cur_param_W,cur_param_b)
                
                
                
                
                
                
        test_param = [np.array([[0.1,0.2],[0.2,0.3],[0.3,0.4]]),np.array([[0.1],[0.2],[0.3]])]        
        print(self.param.eval({param[0]: test_param[0],param[1]: test_param[1]}))        
        print(self.hiddenlayers[0].W.eval({param[0]: test_param[0],param[1]: test_param[1]}))
        print(self.outputlayer.W.eval({param[0]: test_param[0],param[1]: test_param[1]}))
        print(self.param.eval({param[0]: test_param[0],param[1]: test_param[1]}))
        print()
        np.random.seed(0)
        print(self.hiddenlayers[0].output.eval({self.input:np.random.randn(10,2),param[0]: test_param[0],param[1]: test_param[1]}))
        np.random.seed(0)
        print(self.outputlayer.input.eval({self.input:np.random.randn(10,2),param[0]: test_param[0],param[1]: test_param[1]}))
        print()
        np.random.seed(0)
        print(self.outputlayer.p_y_given_x.eval({self.input:np.random.randn(10,2),param[0]: test_param[0],param[1]: test_param[1]}))
        np.random.seed(0) 
        print(self.outputlayer.negative_log_likelihood_mean().eval({self.input:np.random.randn(10,2),param[0]: test_param[0],param[1]: test_param[1],self.output:np.random.randint(2,size=10)}))
        print()
        NLLM = self.negative_log_likelihood_mean()
        c = self.param
        theano.printing.debugprint(NLLM)
        theano.printing.debugprint(c)
        print()
        H_theta = theano.gradient.hessian(NLLM,c,disconnected_inputs='warn')
        np.random.seed(0) 
        print(H_theta.eval({self.input: np.random.randn(10,2), param[0]: test_param[0], param[1]: test_param[1], self.output: np.random.randint(2,size=10)}))